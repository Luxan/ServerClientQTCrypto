/**
\author Sergey Gorokh (ESEGORO)
*/
#include <QApplication>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <stdio.h>
#include <signal.h>

#include "../../include/server/mainwindow.h"
#include "../../include/server/modules/database.h"
#include "../../include/server/modules/epoll_tcpchannel.h"

#include "../../include/server/modules/message_processor.h"
#include "../../include/server/modules/crypto_processor.h"
#include "../../include/server/modules/message_collector.h"
#include "../../include/server/slog.h"
#include "../../include/shared/user.h"
#include "../../include/shared/crypto/crypto.h"
#include "../../include/shared/crypto/certificate.h"
#include "../../include/server/controllers/controller_gui_messagecollector.h"
#include "../../include/server/controllers/controller_gui_messageprocessor.h"
#include "../../include/server/controllers/controller_gui_tcpchannel.h"
#include "../../include/server/controllers/controller_messagecollector_messageprocessor.h"
#include "../../include/shared/configuration.h"

uint8_t googlecert[] = {
0x30,0x82,0x03,0x21,0x30,0x82,0x02,0x8A,0xA0,0x03,0x02,0x01,0x02,0x02,0x10,0x4B,
0xA5,0xAE,0x59,0xDE,0xDD,0x1C,0xC7,0x80,0x7C,0x89,0x22,0x91,0xF0,0xE2,0x43,0x30,
0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x04,0x05,0x00,0x30,0x4C,
0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x5A,0x41,0x31,0x25,0x30,
0x23,0x06,0x03,0x55,0x04,0x0A,0x13,0x1C,0x54,0x68,0x61,0x77,0x74,0x65,0x20,0x43,
0x6F,0x6E,0x73,0x75,0x6C,0x74,0x69,0x6E,0x67,0x20,0x28,0x50,0x74,0x79,0x29,0x20,
0x4C,0x74,0x64,0x2E,0x31,0x16,0x30,0x14,0x06,0x03,0x55,0x04,0x03,0x13,0x0D,0x54,
0x68,0x61,0x77,0x74,0x65,0x20,0x53,0x47,0x43,0x20,0x43,0x41,0x30,0x1E,0x17,0x0D,
0x30,0x36,0x30,0x35,0x31,0x35,0x32,0x33,0x31,0x38,0x31,0x31,0x5A,0x17,0x0D,0x30,
0x37,0x30,0x35,0x31,0x35,0x32,0x33,0x31,0x38,0x31,0x31,0x5A,0x30,0x68,0x31,0x0B,
0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x55,0x53,0x31,0x13,0x30,0x11,0x06,
0x03,0x55,0x04,0x08,0x13,0x0A,0x43,0x61,0x6C,0x69,0x66,0x6F,0x72,0x6E,0x69,0x61,
0x31,0x16,0x30,0x14,0x06,0x03,0x55,0x04,0x07,0x13,0x0D,0x4D,0x6F,0x75,0x6E,0x74,
0x61,0x69,0x6E,0x20,0x56,0x69,0x65,0x77,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,
0x0A,0x13,0x0A,0x47,0x6F,0x6F,0x67,0x6C,0x65,0x20,0x49,0x6E,0x63,0x31,0x17,0x30,
0x15,0x06,0x03,0x55,0x04,0x03,0x13,0x0E,0x77,0x77,0x77,0x2E,0x67,0x6F,0x6F,0x67,
0x6C,0x65,0x2E,0x63,0x6F,0x6D,0x30,0x81,0x9F,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,
0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,0x03,0x81,0x8D,0x00,0x30,0x81,0x89,0x02,
0x81,0x81,0x00,0xE6,0xC5,0xC6,0x8D,0xCD,0x0B,0xA3,0x03,0x04,0xDC,0xAE,0xCC,0xC9,
0x46,0xBE,0xBD,0xCC,0x9D,0xBC,0x73,0x34,0x48,0xFE,0xD3,0x75,0x64,0xD0,0xC9,0xC9,
0x76,0x27,0x72,0x0F,0xA9,0x96,0x1A,0x3B,0x81,0xF3,0x14,0xF6,0xAE,0x90,0x56,0xE7,
0x19,0xD2,0x73,0x68,0xA7,0x85,0xA4,0xAE,0xCA,0x24,0x14,0x30,0x00,0xBA,0xE8,0x36,
0x5D,0x81,0x73,0x3A,0x71,0x05,0x8F,0xB1,0xAF,0x11,0x87,0xDA,0x5C,0xF1,0x3E,0xBF,
0x53,0x51,0x84,0x6F,0x44,0x0E,0xB7,0xE8,0x26,0xD7,0x2F,0xB2,0x6F,0xF2,0xF2,0x5D,
0xDF,0xA7,0xCF,0x8C,0xA5,0xE9,0x1E,0x6F,0x30,0x48,0x94,0x21,0x0B,0x01,0xAD,0xBA,
0x0E,0x71,0x01,0x0D,0x10,0xEF,0xBF,0xEE,0x2C,0xD3,0x8D,0xFE,0x54,0xA8,0xFE,0xD3,
0x97,0x8F,0xCB,0x02,0x03,0x01,0x00,0x01,0xA3,0x81,0xE7,0x30,0x81,0xE4,0x30,0x28,
0x06,0x03,0x55,0x1D,0x25,0x04,0x21,0x30,0x1F,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,
0x07,0x03,0x01,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x03,0x02,0x06,0x09,0x60,
0x86,0x48,0x01,0x86,0xF8,0x42,0x04,0x01,0x30,0x36,0x06,0x03,0x55,0x1D,0x1F,0x04,
0x2F,0x30,0x2D,0x30,0x2B,0xA0,0x29,0xA0,0x27,0x86,0x25,0x68,0x74,0x74,0x70,0x3A,
0x2F,0x2F,0x63,0x72,0x6C,0x2E,0x74,0x68,0x61,0x77,0x74,0x65,0x2E,0x63,0x6F,0x6D,
0x2F,0x54,0x68,0x61,0x77,0x74,0x65,0x53,0x47,0x43,0x43,0x41,0x2E,0x63,0x72,0x6C,
0x30,0x72,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x01,0x01,0x04,0x66,0x30,0x64,
0x30,0x22,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x30,0x01,0x86,0x16,0x68,0x74,
0x74,0x70,0x3A,0x2F,0x2F,0x6F,0x63,0x73,0x70,0x2E,0x74,0x68,0x61,0x77,0x74,0x65,
0x2E,0x63,0x6F,0x6D,0x30,0x3E,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x30,0x02,
0x86,0x32,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x77,0x77,0x77,0x2E,0x74,0x68,0x61,
0x77,0x74,0x65,0x2E,0x63,0x6F,0x6D,0x2F,0x72,0x65,0x70,0x6F,0x73,0x69,0x74,0x6F,
0x72,0x79,0x2F,0x54,0x68,0x61,0x77,0x74,0x65,0x5F,0x53,0x47,0x43,0x5F,0x43,0x41,
0x2E,0x63,0x72,0x74,0x30,0x0C,0x06,0x03,0x55,0x1D,0x13,0x01,0x01,0xFF,0x04,0x02,
0x30,0x00,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x04,0x05,
0x00,0x03,0x81,0x81,0x00,0x57,0x4B,0xBC,0xA4,0x43,0xE7,0xE0,0x01,0x92,0xA0,0x96,
0x35,0xF9,0x18,0x08,0x88,0x1D,0x7B,0x70,0x19,0x8F,0xF9,0x36,0xB2,0x05,0x3A,0x05,
0xCA,0x14,0x59,0x4D,0x24,0x0E,0xE5,0x8A,0xAF,0x4E,0x87,0x5A,0xF7,0x1C,0x2A,0x96,
0x8F,0xCB,0x61,0x40,0x9E,0xD2,0xB4,0x38,0x40,0x21,0x24,0xC1,0x4F,0x1F,0xCB,0x13,
0x4A,0x8F,0x95,0x02,0xDF,0x91,0x3D,0xD6,0x40,0xEB,0x11,0x6F,0x9B,0x10,0xA1,0x6F,
0xCE,0x91,0x5E,0x30,0xF6,0x6D,0x13,0x5E,0x15,0xA4,0x2E,0xC2,0x18,0x9E,0x00,0xC3,
0xD8,0x32,0x67,0x47,0xFC,0xB8,0x1E,0x9A,0xD9,0x9A,0x8E,0xCC,0xFF,0x7C,0x12,0xB7,
0x03,0xBF,0x52,0x20,0xCF,0x21,0xF4,0xF3,0x77,0xDD,0x12,0x15,0xF0,0x94,0xFA,0x90,
0xD5,0xE3,0x59,0x68,0x81
};

void signal_callback_handler(int signum)
{
    printf("Caught signal %d\n",signum);
    // Cleanup and close up stuff here
    // Terminate program
    exit(signum);
}

void addUsersTest()
{
    //DataBase::GetDataBase().addUser(std::make_shared<User>(1, "login1", "password"));
}

int main(int argc, char *argv[])
{
    srand(time(NULL));
    // Register signal and signal handler
    signal(SIGINT, signal_callback_handler);

    QApplication a(argc, argv);

    Buffer b(googlecert, sizeof(googlecert));
    Certificate certificate(&b);

    Controller_GUI_MessageCollector cgmc;
    Controller_GUI_MessageProcessor cgmp;
    Controller_GUI_tcpChannel cgtc;
    //Controller_MessageCollector_MessageProcessor cmcmp;
    //Controller_tcpChannel_MessageCollector ctcms;

    MainWindow w;

    //create MessageProcessor
    ThreadConfiguration conf1;
    conf1.loopSleepTime = 10;
    conf1.unsleepReactionTime = 1000;
    conf1.sleepLoopMode = ThreadConfiguration::doSleepInsideLoop;
    conf1.responseSleepEvent = eSystemEvent::ResponseSleepMessageProcessor;
    conf1.responseStartEvent = eSystemEvent::ResponseStartMessageProcessor;
    MessageProcessor mp(conf1, 10);

    //create MessageCollector
    ThreadConfiguration conf2;
    conf2.loopSleepTime = 10;
    conf2.unsleepReactionTime = 1000;
    conf2.sleepLoopMode = ThreadConfiguration::doSleepInsideLoop;
    conf2.responseSleepEvent = eSystemEvent::ResponseSleepMessageCollector;
    conf2.responseStartEvent = eSystemEvent::ResponseStartMessageCollector;
    MessageCollector collector(conf2);

    //create EpollTCPChannel
    ThreadConfiguration conf3;
    conf3.loopSleepTime = 0;
    conf3.unsleepReactionTime = 1000;
    conf3.sleepLoopMode = ThreadConfiguration::doNotSleepInsideLoop;
    conf3.responseSleepEvent = eSystemEvent::ResponseSleepTcpChannel;
    conf3.responseStartEvent = eSystemEvent::ResponseStartTcpChannel;
    EpollTCPChannel server(conf3, globalConfiguration.serverPort, 64, &certificate);

    //create DataBase
    ThreadConfiguration conf4;
    conf4.loopSleepTime = 10;
    conf4.unsleepReactionTime = 1000;
    conf4.sleepLoopMode = ThreadConfiguration::doSleepInsideLoop;
    conf4.responseSleepEvent = eSystemEvent::ResponseSleepDatabase;
    conf4.responseStartEvent = eSystemEvent::ResponseStartDatabase;
    DataBase db(conf4);

    //create CryptoProcessor
    ThreadConfiguration conf5;
    conf5.loopSleepTime = 10;
    conf5.unsleepReactionTime = 1000;
    conf5.sleepLoopMode = ThreadConfiguration::doSleepInsideLoop;
    conf5.responseSleepEvent = eSystemEvent::ResponseSleepEncryptionProcessor;
    conf5.responseStartEvent = eSystemEvent::ResponseStartEncryptionProcessor;
    EncryptionProcessor encr(conf5);

    ThreadConfiguration conf6;
    conf6.loopSleepTime = 10;
    conf6.unsleepReactionTime = 1000;
    conf6.sleepLoopMode = ThreadConfiguration::doSleepInsideLoop;
    conf6.responseSleepEvent = eSystemEvent::ResponseSleepDecryptionProcessor;
    conf6.responseStartEvent = eSystemEvent::ResponseStartDecryptionProcessor;
    EncryptionProcessor decr(conf6);
    Sha256Hasher hasher;
    Cipher rsaCipher;
    server.setCrypto(&hasher, &rsaCipher);

    SLog::logInfo().setGuiLevel(&w);

    cgmc.setModule1Obj(&w);
    cgmc.setModule2Obj(&collector);

    cgmp.setModule1Obj(&w);
    cgmp.setModule2Obj(&mp);

    cgtc.setModule1Obj(&w);
    cgtc.setModule2Obj(&server);

    cmcmp.setModule1Obj(&collector);
    cmcmp.setModule2Obj(&mp);

    ctcms.setModule1Obj(&server);
    ctcms.setModule2Obj(&collector);

    w.AddEventController(&cgmc);
    w.AddEventController(&cgmp);
    w.AddEventController(&cgtc);

    mp.AddEventController(&cgmp);
    mp.AddEventController(&cmcmp);

    collector.AddEventController(&cgmc);
    collector.AddEventController(&cmcmp);
    collector.AddEventController(&ctcms);

    server.AddEventController(&cgtc);
    server.AddEventController(&ctcms);

    w.show();

    int i = a.exec();

    DataBase::ReleaseResources();

    return i;
}
